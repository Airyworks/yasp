use yasp_ast::{
    dml,
    expr,
    model
};
use yasp_datum::DatumTrait;

grammar<T> where T: DatumTrait;

match {
    r"(?i)select" => "SELECT",
    r"(?i)from" => "FROM",
    r"(?i)update" => "UPDATE",
    r"(?i)set" => "SET",
    r"(?i)null" => "NULL",
} else {
    _
}

/// operators
EQ: &'input str = "=" => <>;
/// keywords
SELECT: &'input str = "SELECT" => <>;
FROM: &'input str = "FROM" => <>;
UPDATE: &'input str = "UPDATE" => <>;
SET: &'input str = "SET" => <>;
NULL: &'input str = "NULL" => <>;

/// seperators
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

/// basic identities
Name: &'input str = {
    r"\w+" => <>,
    r#""\w+""# => <>,
}

CIStr: model::CIStr = Name => <>.into();
Table = CIStr;
Column = CIStr;

Field: dml::Field = {
    "*" => dml::Field::new_all(),
    Column => dml::Field::new_column(<>),
    <table: Table>"."<column: Column> => dml::Field::new_column(column).with_table(table),
};

Fields = Comma<Field>;

Assignment: dml::Assignment<T> = <field: Field> EQ <expr: AssignExpr> => dml::Assignment{
    field,
    expr,
};

Assignments = Comma<Assignment>;

AssignExpr: expr::Expr<T> = {
    Datum,
    SelectStmt
};

/// expressions
pub Exprs = Semicolon<Expr>;

pub Expr: expr::Expr<T> = {
    Datum,
    SelectStmt,
    UpdateStmt,
};

Datum: expr::Expr<T> = {
    NULL => expr::Expr::<T>::Datum(T::from_null()),
    Name => expr::Expr::<T>::Datum(T::from_raw(<>)),
};

SelectStmt: expr::Expr<T> = SELECT <fields: Fields> FROM <result_table: Table> => expr::Expr::<T>::Select(dml::SelectStmt{
    fields,
    result_table,
});

UpdateStmt: expr::Expr<T> = UPDATE <table: Table> SET <list: Assignments> => expr::Expr::<T>::Update(dml::UpdateStmt{
    list,
    table,
});

