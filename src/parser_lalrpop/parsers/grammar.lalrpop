use yasp_ast::{
    dml::*,
    expr::*,
    model::*
};
use yasp_datum::DatumTrait;

grammar<F> where F: DatumTrait;

match {
    r"(?i)select" => "SELECT",
    r"(?i)from" => "FROM",
} else {
    _
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

SELECT: &'input str = "SELECT" => <>;
FROM: &'input str = "FROM" => <>;

pub Exprs = Semicolon<Expr>;

pub Expr: Expr<F> = {
    SELECT <fields: Fields> FROM <result_table: ResultTable> => Expr::<F>::Select(SelectStmt{
        fields,
        result_table,
    })
};

Name: CIStr = r"\w+" => <>.into();

Fields = Comma<Field>;

Field: Field = {
    "*" => Field::new_all(),
    Name => Field::new_column(<>),
    <table: Name>"."<column: Name> => Field::new_column(column).with_table(table),
};

ResultTable = Name;
