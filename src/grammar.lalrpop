use crate::ast::{
    ast::*,
    dml::*,
    model::*
};

grammar;

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Exprs = Semicolon<Expr>;

pub Expr: SelectNode = {
    "select" <fields: Fields> "from" <result_table: ResultTable> => SelectNode{
        fields,
        result_table,
    }
};

Name: CIStr = r"[0-9a-zA-Z_]+" => <>.into();

pub Fields = Comma<Field>;

pub Field: Field = {
    "*" => Field::new_all(),
    Name => Field::new_column(<>),
    <table: Name>"."<column: Name> => Field::new_column(column).with_table(table),
};

ResultTable = Name;
